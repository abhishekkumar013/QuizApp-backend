// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
}

enum  AccessType {
  PUBLIC
  PRIVATE
  PROTECTED
}

enum QuizStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ResultStatus {
  IN_PROGRESS
  COMPLETED
  SUBMITTED
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}



model User {
  id       String   @id @default(uuid())
  name     String
  email    String   
  password String
  role     Role
  fcmToken String?

  studentProfile StudentProfile? @relation("StudentUser")
  parentProfile  ParentProfile?  @relation("ParentUser")
  teacherProfile TeacherProfile? @relation("TeacherUser")
  adminProfile   AdminProfile?   @relation("AdminUser")

  // children       StudentProfile[] @relation("ParentRelation")
  // quizzes        Quiz[]        @relation("TeacherQuizzes")
  sessions       QuizSession[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([role,email])
}

model StudentProfile {
  id        String   @id @default(uuid())
  userId    String   @unique
  parentId  String?
  Block     Boolean @default(false)
  Rank      Int     @default(-1)
  points    Int     @default(0)

  user       User     @relation("StudentUser", fields: [userId], references: [id], onDelete: Cascade)
  parent     ParentProfile?    @relation("ParentRelation", fields: [parentId], references: [id])

  assignedQuizzes QuizAssignment[]
  quizSessions   QuizSession[]
  results        Result[]
}

model ParentProfile {
  id     String @id @default(uuid())
  userId String @unique
  phone  String?
  Block     Boolean @default(false)

  user   User   @relation("ParentUser", fields: [userId], references: [id],onDelete: Cascade)
  childrens       StudentProfile[] @relation("ParentRelation")
}

model TeacherProfile {
  id              String @id @default(uuid())
  userId          String @unique
  phone           String?
  experienceYears Int?   @default(0)
  Block     Boolean @default(false)

  
  user        User   @relation("TeacherUser", fields: [userId], references: [id], onDelete: Cascade)
  quizzes     Quiz[]        @relation("TeacherQuizzes")


  assignedQuizzes QuizAssignment[]
}

model  AdminProfile{
  id     String @id @default(uuid())
  userId String @unique
  phone  String?
  isVerified Boolean @default(false)
  Block     Boolean @default(false)

  user   User   @relation("AdminUser", fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id      String @id @default(uuid())
  name    String @unique

  quizzes Quiz[]
}

model Quiz {
  id          String    @id @default(uuid())
  title       String
  description String?
  instructions String?
  // createdBy   User      @relation("TeacherQuizzes", fields: [createdById], references: [id])
  createdBy   TeacherProfile      @relation("TeacherQuizzes", fields: [createdById], references: [id],onDelete:Cascade)

  createdById String
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  accessType AccessType @default(PUBLIC)
  status     QuizStatus @default(DRAFT)
  difficulty DifficultyLevel @default(EASY)

  durationInMinutes Int
  totalMarks       Int     @default(0)
  passingMarks     Int     @default(0)
  maxAttempts      Int     @default(1)
  shuffleQuestions Boolean @default(false)
  showResults      Boolean @default(true)

  questions   Question[]
  assignments QuizAssignment[]
  results     Result[]
  sessions    QuizSession[]
  

  startTime   DateTime?
  endTime     DateTime?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


model Question {
  id       String   @id @default(uuid())
  quiz     Quiz     @relation(fields: [quizId], references: [id],onDelete: Cascade)
  quizId   String
  text     String
  score    Int
  explanation String?
  marks      Int     @default(1)
  order      Int
  isRequired Boolean @default(true)

  options  Option[]
  answer   Answer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Option {
  id         String   @id @default(uuid())
  question   Question @relation(fields: [questionId], references: [id],onDelete: Cascade)
  questionId String
  text       String
  isCorrect  Boolean
  order      Int

  answers   Answer[] 
}

model QuizAssignment {
  id         String         @id @default(uuid())
  quiz       Quiz           @relation(fields: [quizId], references: [id],onDelete:Cascade)
  quizId     String
  student    StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId  String
  assignedBy String
  teacher    TeacherProfile @relation(fields: [assignedBy], references: [id], onDelete: Cascade)
  assignedAt DateTime       @default(now())
}

model QuizSession {
  id          String       @id @default(uuid())
  quiz        Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId      String
  student     User         @relation(fields: [studentId], references: [id])
  studentId   String
  studentProfile StudentProfile @relation(fields: [studentProfileId], references: [id], onDelete: Cascade)
  studentProfileId String
  
  status      ResultStatus @default(IN_PROGRESS)
  startedAt   DateTime     @default(now())
  submittedAt DateTime?
  timeSpent   Int         @default(0)
  
  answers     Answer[]
  result      Result? 
}

model Answer{
  id          String      @id @default(uuid())
  session     QuizSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId   String
  question    Question    @relation(fields: [questionId], references: [id],onDelete: Cascade)
  questionId  String
  option      Option?     @relation(fields: [optionId], references: [id],onDelete: SetNull)
  optionId    String?
  textAnswer  String?
  isCorrect   Boolean?
  marksAwarded Int        @default(0)
  
  answeredAt  DateTime    @default(now())
  
  @@unique([sessionId, questionId])
}


model Result {
  id                  String   @id @default(uuid())
  student             StudentProfile     @relation(fields: [studentId], references: [id],onDelete: Cascade)
  studentId           String
  quiz                Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId              String
  sessionId           String  @unique
  session             QuizSession @relation(fields: [sessionId], references: [id])

  score               Int
  totalMarks          Int
  percentage          Float
  questionsAttempted  Int
  questionsCorrect    Int
  questionsIncorrect  Int
  questionsSkipped    Int      @default(0)
  timeTaken           Int
  
  isPassed            Boolean  @default(false)
  attemptNumber       Int      @default(1)
  
  submittedAt         DateTime @default(now())
  
  @@unique([quizId, studentId, attemptNumber])
}